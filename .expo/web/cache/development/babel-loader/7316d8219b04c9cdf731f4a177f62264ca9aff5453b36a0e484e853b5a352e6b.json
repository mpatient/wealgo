{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"style\", \"theme\", \"children\", \"pointerEvents\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport color from 'color';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { black, white } from \"../../styles/colors\";\nimport { withTheme } from \"../../core/theming\";\nvar DataTableRow = function DataTableRow(_ref) {\n  var onPress = _ref.onPress,\n    style = _ref.style,\n    theme = _ref.theme,\n    children = _ref.children,\n    pointerEvents = _ref.pointerEvents,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var borderBottomColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  return React.createElement(TouchableRipple, _extends({}, rest, {\n    onPress: onPress,\n    style: [styles.container, {\n      borderBottomColor: borderBottomColor\n    }, style]\n  }), React.createElement(View, {\n    style: styles.content,\n    pointerEvents: pointerEvents\n  }, children));\n};\nvar styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});\nexport default withTheme(DataTableRow);\nexport { DataTableRow };","map":{"version":3,"names":["React","color","StyleSheet","View","TouchableRipple","black","white","withTheme","DataTableRow","_ref","onPress","style","theme","children","pointerEvents","rest","_objectWithoutProperties","_excluded","borderBottomColor","dark","alpha","rgb","string","createElement","_extends","styles","container","content","create","borderStyle","borderBottomWidth","hairlineWidth","minHeight","paddingHorizontal","flex","flexDirection"],"sources":["C:\\WealGo\\node_modules\\react-native-paper\\lib\\module\\components\\DataTable\\DataTableRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAQA,OAAOC,eAAP;AACA,SAASC,KAAT,EAAgBC,KAAhB;AACA,SAASC,SAAT;AAmDA,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAOL;EAAA,IANXC,OADoB,GAAAD,IAAA,CACpBC,OADoB;IAEpBC,KAFoB,GAAAF,IAAA,CAEpBE,KAFoB;IAGpBC,KAHoB,GAAAH,IAAA,CAGpBG,KAHoB;IAIpBC,QAJoB,GAAAJ,IAAA,CAIpBI,QAJoB;IAKpBC,aALoB,GAAAL,IAAA,CAKpBK,aALoB;IAMjBC,IAAA,GAAAC,wBAAA,CAAAP,IAAA,EAAAQ,SAAA;EAEH,IAAMC,iBAAiB,GAAGjB,KAAK,CAACW,KAAK,CAACO,IAAN,GAAab,KAAb,GAAqBD,KAAtB,CAAL,CACvBe,KADuB,CACjB,IADiB,EAEvBC,GAFuB,GAGvBC,MAHuB,EAA1B;EAKA,OACEtB,KAAA,CAAAuB,aAAA,CAACnB,eAAD,EAAAoB,QAAA,KACMT,IADN;IAEEL,OAAO,EAAEA,OAFX;IAGEC,KAAK,EAAE,CAACc,MAAM,CAACC,SAAR,EAAmB;MAAER,iBAAA,EAAAA;IAAF,CAAnB,EAA0CP,KAA1C;EAHT,IAKEX,KAAA,CAAAuB,aAAA,CAACpB,IAAD;IAAMQ,KAAK,EAAEc,MAAM,CAACE,OAApB;IAA6Bb,aAAa,EAAEA;EAA5C,GACGD,QADH,CALF,CADF;AAWD,CAxBD;AA0BA,IAAMY,MAAM,GAAGvB,UAAU,CAAC0B,MAAX,CAAkB;EAC/BF,SAAS,EAAE;IACTG,WAAW,EAAE,OADJ;IAETC,iBAAiB,EAAE5B,UAAU,CAAC6B,aAFrB;IAGTC,SAAS,EAAE,EAHF;IAITC,iBAAiB,EAAE;EAJV,CADoB;EAO/BN,OAAO,EAAE;IACPO,IAAI,EAAE,CADC;IAEPC,aAAa,EAAE;EAFR;AAPsB,CAAlB,CAAf;AAaA,eAAe5B,SAAS,CAACC,YAAD,CAAxB;AAGA,SAASA,YAAT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}