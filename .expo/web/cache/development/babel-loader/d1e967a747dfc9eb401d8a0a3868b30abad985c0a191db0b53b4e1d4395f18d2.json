{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n    status = _ref.status,\n    label = _ref.label,\n    onPress = _ref.onPress,\n    labelStyle = _ref.labelStyle,\n    theme = _ref.theme,\n    testID = _ref.testID,\n    mode = _ref.mode,\n    _ref$position = _ref.position,\n    position = _ref$position === void 0 ? 'trailing' : _ref$position,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n  return React.createElement(TouchableRipple, {\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    style: [styles.label, {\n      color: theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","_ref","style","status","label","onPress","labelStyle","theme","testID","mode","_ref$position","position","props","_objectWithoutProperties","_excluded","checkboxProps","_objectSpread","isLeading","checkbox","createElement","styles","container","pointerEvents","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["C:\\WealGo\\node_modules\\react-native-paper\\lib\\module\\components\\Checkbox\\CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position. Default is `trailing`.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple onPress={onPress} testID={testID}>\n      <View style={[styles.container, style]} pointerEvents=\"none\">\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}