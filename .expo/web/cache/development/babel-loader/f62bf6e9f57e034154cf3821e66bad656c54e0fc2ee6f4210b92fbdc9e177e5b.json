{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport Swiper from 'react-native-swiper';\nimport Screen1 from \"./Screen1\";\nimport Screen2 from \"./Screen2\";\nimport Screen3 from \"./Screen3\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar TellMeMore = function TellMeMore() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentIndex = _useState2[0],\n    setCurrentIndex = _useState2[1];\n  return _jsx(Stack.Navigator, {\n    initialRouteName: \"SwipeScreen\",\n    headerMode: \"none\",\n    children: _jsx(Stack.Screen, {\n      name: \"SwipeScreen\",\n      children: function children() {\n        return _jsx(SwipeScreen, {\n          currentIndex: currentIndex,\n          setCurrentIndex: setCurrentIndex\n        });\n      }\n    })\n  });\n};\nvar SwipeScreen = function SwipeScreen(_ref) {\n  var currentIndex = _ref.currentIndex,\n    setCurrentIndex = _ref.setCurrentIndex;\n  var progressBarWidth = new Animated.Value(0);\n  var onIndexChanged = function onIndexChanged(index) {\n    setCurrentIndex(index);\n    Animated.timing(progressBarWidth, {\n      toValue: (index + 1) * 100,\n      duration: 300,\n      useNativeDriver: false\n    }).start();\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsxs(Swiper, {\n      loop: false,\n      showsPagination: true,\n      dotStyle: {\n        backgroundColor: '#aaa',\n        width: 10,\n        height: 10,\n        margin: 3,\n        borderRadius: 5\n      },\n      activeDotStyle: {\n        backgroundColor: '#000',\n        width: 10,\n        height: 10,\n        margin: 3,\n        borderRadius: 5\n      },\n      activeDotColor: \"#000\",\n      dotColor: \"#aaa\",\n      index: currentIndex,\n      onIndexChanged: onIndexChanged,\n      children: [_jsx(SwiperScreen, {\n        component: Screen1\n      }), _jsx(SwiperScreen, {\n        component: Screen2\n      }), _jsx(SwiperScreen, {\n        component: Screen3\n      })]\n    }), _jsx(Animated.View, {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: progressBarWidth,\n        height: 2,\n        backgroundColor: 'blue'\n      }\n    })]\n  });\n};\nvar SwiperScreen = function SwiperScreen(_ref2) {\n  var Component = _ref2.component;\n  return _jsx(View, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(Component, {})\n  });\n};\nexport default TellMeMore;","map":{"version":3,"names":["React","useState","View","Animated","createStackNavigator","Swiper","Screen1","Screen2","Screen3","jsx","_jsx","jsxs","_jsxs","Stack","TellMeMore","_useState","_useState2","_slicedToArray","currentIndex","setCurrentIndex","Navigator","initialRouteName","headerMode","children","Screen","name","SwipeScreen","_ref","progressBarWidth","Value","onIndexChanged","index","timing","toValue","duration","useNativeDriver","start","style","flex","loop","showsPagination","dotStyle","backgroundColor","width","height","margin","borderRadius","activeDotStyle","activeDotColor","dotColor","SwiperScreen","component","position","top","left","_ref2","Component"],"sources":["C:/WealGo/components/Tellmemore.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, Animated } from 'react-native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport Swiper from 'react-native-swiper';\r\nimport Screen1 from './Screen1';\r\nimport Screen2 from './Screen2';\r\nimport Screen3 from './Screen3';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst TellMeMore = () => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  return ( \r\n    <Stack.Navigator initialRouteName=\"SwipeScreen\" headerMode=\"none\">\r\n      <Stack.Screen name=\"SwipeScreen\">\r\n        {() => (\r\n          <SwipeScreen\r\n            currentIndex={currentIndex}\r\n            setCurrentIndex={setCurrentIndex}\r\n          />\r\n        )}\r\n      </Stack.Screen>\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n\r\nconst SwipeScreen = ({ currentIndex, setCurrentIndex }) => {\r\n  const progressBarWidth = new Animated.Value(0);\r\n\r\n  const onIndexChanged = index => {\r\n    setCurrentIndex(index);\r\n    Animated.timing(progressBarWidth, {\r\n      toValue: (index + 1) * 100, // Assuming each screen has equal width\r\n      duration: 300, // Duration of animation\r\n      useNativeDriver: false,\r\n    }).start();\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Swiper\r\n        loop={false}\r\n        showsPagination={true}\r\n        dotStyle={{ backgroundColor: '#aaa', width: 10, height: 10, margin: 3, borderRadius: 5 }}\r\n        activeDotStyle={{ backgroundColor: '#000', width: 10, height: 10, margin: 3, borderRadius: 5 }}\r\n        activeDotColor=\"#000\"\r\n        dotColor=\"#aaa\"\r\n        index={currentIndex}\r\n        onIndexChanged={onIndexChanged}\r\n      >\r\n        <SwiperScreen component={Screen1} />\r\n        <SwiperScreen component={Screen2} />\r\n        <SwiperScreen component={Screen3} />\r\n      </Swiper>\r\n      <Animated.View\r\n        style={{\r\n          position: 'absolute',\r\n          top: 0,\r\n          left: 0,\r\n          width: progressBarWidth,\r\n          height: 2,\r\n          backgroundColor: 'blue',\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst SwiperScreen = ({ component: Component }) => {\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Component />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default TellMeMore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}