{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Formik } from 'formik';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { colors } from \"./other_components/colors\";\nvar primary = colors.primary;\nimport MainContainer from \"./other_components/Containers/MainContainer\";\nimport KeyboardAvoidingContainer from \"./other_components/Containers/KeyboardAvoidingContainer\";\nimport RegularText from \"./other_components/Texts/RegularText\";\nimport StyledTextInput from \"./other_components/Inputs/StyledTextInput\";\nimport MsgBox from \"./other_components/Texts/MsgBox\";\nimport RegularButton from \"./other_components/Buttons/RegularButton\";\nimport PressableText from \"./other_components/Texts/PressableText\";\nimport RowContainer from \"./other_components/Containers/RowContainer\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Login = function Login() {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    message = _useState2[0],\n    setMessage = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isSuccessMessage = _useState4[0],\n    setIsSuccessMessage = _useState4[1];\n  var handleLogin = function () {\n    var _ref = _asyncToGenerator(function* (credentials, setSubmitting) {\n      try {\n        setMessage(null);\n        setSubmitting(false);\n      } catch (error) {\n        setMessage('Login failed: ' + error.message);\n        setSubmitting(false);\n      }\n    });\n    return function handleLogin(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(MainContainer, {\n    children: _jsxs(KeyboardAvoidingContainer, {\n      children: [_jsx(RegularText, {\n        style: {\n          marginBottom: 25\n        },\n        children: \"Enter your account information\"\n      }), _jsx(Formik, {\n        initialValues: {\n          email: '',\n          password: ''\n        },\n        onSubmit: function onSubmit(values, _ref2) {\n          var setSubmitting = _ref2.setSubmitting;\n          if (values.email === \"\" || values.password === \"\") {\n            setMessage('Please fill in all fields');\n            setSubmitting(false);\n          } else {\n            handleLogin(values, setSubmitting);\n          }\n        },\n        children: function children(_ref3) {\n          var handleChange = _ref3.handleChange,\n            handleBlur = _ref3.handleBlur,\n            handleSubmit = _ref3.handleSubmit,\n            values = _ref3.values,\n            isSubmitting = _ref3.isSubmitting;\n          return _jsxs(_Fragment, {\n            children: [_jsx(StyledTextInput, {\n              label: \"Email Address\",\n              icon: \"email-variant\",\n              placeholder: \"sample12@gmail.com\",\n              keyboardType: \"email-address\",\n              onChangeText: handleChange('email'),\n              onBlur: handleBlur('email'),\n              value: values.email,\n              style: {\n                marginBottom: 25\n              }\n            }), _jsx(StyledTextInput, {\n              label: \"Password\",\n              icon: \"lock-open\",\n              placeholder: \"* * * * * * *\",\n              onChangeText: handleChange('password'),\n              onBlur: handleBlur('password'),\n              value: values.password,\n              isPassword: true,\n              style: {\n                marginBottom: 25\n              }\n            }), _jsx(MsgBox, {\n              style: {\n                marginBottom: 25\n              },\n              success: isSuccessMessage,\n              children: message || ' '\n            }), !isSubmitting && _jsx(RegularButton, {\n              onPress: handleSubmit,\n              children: \"Login\"\n            }), isSubmitting && _jsx(RegularButton, {\n              disabled: true,\n              children: _jsx(ActivityIndicator, {\n                size: \"small\",\n                color: primary\n              })\n            }), _jsxs(RowContainer, {\n              children: [_jsx(PressableText, {\n                onPress: function onPress() {},\n                children: \"New account sign up\"\n              }), _jsx(PressableText, {\n                onPress: function onPress() {},\n                children: \"Forgot Password\"\n              })]\n            })]\n          });\n        }\n      })]\n    })\n  });\n};\nexport default Login;","map":{"version":3,"names":["React","useState","Formik","ActivityIndicator","colors","primary","MainContainer","KeyboardAvoidingContainer","RegularText","StyledTextInput","MsgBox","RegularButton","PressableText","RowContainer","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Login","_useState","_useState2","_slicedToArray","message","setMessage","_useState3","_useState4","isSuccessMessage","setIsSuccessMessage","handleLogin","_ref","_asyncToGenerator","credentials","setSubmitting","error","_x","_x2","apply","arguments","children","style","marginBottom","initialValues","email","password","onSubmit","values","_ref2","_ref3","handleChange","handleBlur","handleSubmit","isSubmitting","label","icon","placeholder","keyboardType","onChangeText","onBlur","value","isPassword","success","onPress","disabled","size","color"],"sources":["C:/WealGo/components/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Formik } from 'formik';\r\nimport { ActivityIndicator } from 'react-native';\r\n\r\nimport { colors } from './other_components/colors';\r\nconst { primary } = colors;\r\n\r\nimport MainContainer from './other_components/Containers/MainContainer';\r\nimport KeyboardAvoidingContainer from './other_components/Containers/KeyboardAvoidingContainer';\r\nimport RegularText from './other_components/Texts/RegularText';\r\nimport StyledTextInput from './other_components/Inputs/StyledTextInput';\r\nimport MsgBox from './other_components/Texts/MsgBox';\r\nimport RegularButton from './other_components/Buttons/RegularButton';\r\nimport PressableText from './other_components/Texts/PressableText';\r\nimport RowContainer from './other_components/Containers/RowContainer';\r\n\r\nconst Login = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [isSuccessMessage, setIsSuccessMessage] = useState(false);\r\n\r\n    const handleLogin = async (credentials, setSubmitting) => {\r\n        try {\r\n            setMessage(null);\r\n\r\n            // call backend\r\n\r\n            // move to next page \r\n\r\n            setSubmitting(false);\r\n        } catch (error) {\r\n            setMessage('Login failed: ' + error.message);\r\n            setSubmitting(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MainContainer>\r\n            <KeyboardAvoidingContainer>\r\n                <RegularText style={{ marginBottom: 25 }}>Enter your account information</RegularText>\r\n\r\n                <Formik \r\n                    initialValues={{ email: '', password: '' }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        if (values.email === \"\" || values.password === \"\") {\r\n                            setMessage('Please fill in all fields');\r\n                            setSubmitting(false);\r\n                        } else {\r\n                            handleLogin(values, setSubmitting);  // Corrected handleLogin\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ handleChange, handleBlur, handleSubmit, values, isSubmitting }) => (\r\n                        <>\r\n                            <StyledTextInput \r\n                                label=\"Email Address\"\r\n                                icon=\"email-variant\"\r\n                                placeholder=\"sample12@gmail.com\"\r\n                                keyboardType=\"email-address\"\r\n                                onChangeText={handleChange('email')}\r\n                                onBlur={handleBlur('email')}\r\n                                value={values.email}\r\n                                style={{ marginBottom: 25 }}\r\n                            />\r\n\r\n                            <StyledTextInput \r\n                                label=\"Password\"\r\n                                icon=\"lock-open\"\r\n                                placeholder=\"* * * * * * *\"\r\n                                onChangeText={handleChange('password')}\r\n                                onBlur={handleBlur('password')}\r\n                                value={values.password}\r\n                                isPassword={true}\r\n                                style={{ marginBottom: 25 }}\r\n                            />\r\n\r\n                            <MsgBox style={{ marginBottom: 25 }} success={isSuccessMessage}>\r\n                                {message || ' '}\r\n                            </MsgBox>\r\n\r\n                            {!isSubmitting && <RegularButton onPress={handleSubmit}>Login</RegularButton>}\r\n                            {isSubmitting && (\r\n                                <RegularButton disabled={true}>\r\n                                    <ActivityIndicator size=\"small\" color={primary} />\r\n                                </RegularButton>\r\n                            )}\r\n\r\n                            <RowContainer>\r\n                                <PressableText onPress={() => {}}>New account sign up</PressableText>\r\n                                <PressableText onPress={() => {}}>Forgot Password</PressableText>\r\n                            </RowContainer>\r\n                        </>\r\n                    )}\r\n                </Formik>\r\n            </KeyboardAvoidingContainer>\r\n        </MainContainer>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}